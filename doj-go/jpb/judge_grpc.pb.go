// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: sandbox.proto

package jpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	JudgeServer_Judge_FullMethodName = "/jpb.JudgeServer/Judge"
)

// JudgeServerClient is the client API for JudgeServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JudgeServerClient interface {
	Judge(ctx context.Context, in *JudgeItem, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type judgeServerClient struct {
	cc grpc.ClientConnInterface
}

func NewJudgeServerClient(cc grpc.ClientConnInterface) JudgeServerClient {
	return &judgeServerClient{cc}
}

func (c *judgeServerClient) Judge(ctx context.Context, in *JudgeItem, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, JudgeServer_Judge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JudgeServerServer is the server API for JudgeServer service.
// All implementations must embed UnimplementedJudgeServerServer
// for forward compatibility
type JudgeServerServer interface {
	Judge(context.Context, *JudgeItem) (*emptypb.Empty, error)
	mustEmbedUnimplementedJudgeServerServer()
}

// UnimplementedJudgeServerServer must be embedded to have forward compatible implementations.
type UnimplementedJudgeServerServer struct {
}

func (UnimplementedJudgeServerServer) Judge(context.Context, *JudgeItem) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Judge not implemented")
}
func (UnimplementedJudgeServerServer) mustEmbedUnimplementedJudgeServerServer() {}

// UnsafeJudgeServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JudgeServerServer will
// result in compilation errors.
type UnsafeJudgeServerServer interface {
	mustEmbedUnimplementedJudgeServerServer()
}

func RegisterJudgeServerServer(s grpc.ServiceRegistrar, srv JudgeServerServer) {
	s.RegisterService(&JudgeServer_ServiceDesc, srv)
}

func _JudgeServer_Judge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JudgeItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JudgeServerServer).Judge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JudgeServer_Judge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JudgeServerServer).Judge(ctx, req.(*JudgeItem))
	}
	return interceptor(ctx, in, info, handler)
}

// JudgeServer_ServiceDesc is the grpc.ServiceDesc for JudgeServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JudgeServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jpb.JudgeServer",
	HandlerType: (*JudgeServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Judge",
			Handler:    _JudgeServer_Judge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sandbox.proto",
}
